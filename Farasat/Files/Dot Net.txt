Dot Net Framework:-
CLR (Common Language Runtime):-
	memory management:
	type safety:
	exception handling:
	garbage collection: 
	security:
	thread management:

CTS: Common Type System eg: int, bool, string
JIT: Just In Time compiler: Responsible of compilation.
GC (Garbage Collector): Memory management by cleaning the un-allocated variables, methods or objects.
MSCORLIB (Micosoft core libraries) or Dot Net Framework Class Libraries: its a set of multiple namespaces provided by microsoft for the help of developers.


*******************************************************
Dot.Net framoework offers multiple languages:-
C#, F#, C++.Net, VB.Net
*******************************************************

C#:-
C# is a not farmework language.

What is programming Language:-
C#, cobol, c++, VB, Java, C.

Solution:-
Its a collection of projects.

Project:-
Its a collection of Namespaces.
In Dot net we have 2 types of outputs of projects:-
1- .exe (Executable)
2- .dll (Dynamic Link Library) (Re-usable)
	a-Its a reusable file means if you have utility functions like to proint something in specific format or to have tax calculation functions
	you can refer that dll in any project.

	b-Its a pre-compiled format so it will not be built when the parent(the project who referred that dll) project is built.

Namespace:-
Its a collection of classes.

Just like folder but folder is a physical grouping of files.
whereas namespace is a logical grouping of classes.
eg: Finance Module classes will not be in HR module. So we divide classes into business vise logical groups.

Any number of namespaces can be used in a program but only those will contribute to your dll/exe whose functions are being used.

IL (Intermediate Language):-
Intermediate language is generated by all the languages in dot net thats why any language's dll can be referred in any language's project.

ILDASM (IL Dis-assembler):-
Its used to dis assamble the exe or dll file.

Methods:-
water GiveMeWater()
{
}

vegitable(Return Type) GiveMeVegitable(Amount, Bike) //Parameters
{
}