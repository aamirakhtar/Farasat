OOP:-
1-Inheritance
2-Encapsulation
3-Containment
	a-Aggregation
	b-Composition
	c-Hybrid
4-Polymorphism
5-Abstraction
6-(Specialization)
7-(Generalization)
**************************************
Types of Inheritance:-
1-Single
2-Multi Level 
3-Multiple (Un-implimentable)
4-Multipath inheritance (Un-implimentable)
5-Heirarchichal
6-Hybrid
**************************************
-The "implicit" or automatic posession of the properties and functionalities from the parent to the child.
-Is a "is a" relation (logical Definition)

Class:-
Recepie

Object:-
Intance of that recepie

Extend, Making Child or Inherit => Inheritance

Multiple Inheritance:-
when you multiple parents of a child

Dryer
Washingmachine

AutmaticWashingMachine : Dryer, WashingMachine

BedRoomFurniture
{
Lay()
}

Sofa : Furniture lay()
Bed : lay()

SofaCumBed : Sofa , Bed
{

}

****************
Car
	Hatchback
		Vitz
			Manual : Vitz99: Vitz2005: Vitz2011
			Auto : Vitz99: Vitz2005: Vitz2011
		Alto
			Manual
			Auto
		Nano
	Sedan
		Corolla
		Mercedes
		BMW
	Sports
		Ferrari
		Porche
		Lamborghini


******************************************
Human
	Singer
		Classical
			Darbari
			Beharwi
		Pop
			Rap
			Commercial
			Metal
		Sufi
		Folk
		Jazz
		Rock
	Teacher 
		Maths: AlgebraTeacher
		English: EnglishLiterature: EnglishPoetry: EnglishPoemsTeacher
		Islamiyat: QuranTeacher: HadithTeacher
	Doctor
	Carpenter
*******************************************
Encapsulation:-
Accessibility, means whether to allow access of property or functionality by the object.

To implement encapsulation in prograamming languages we use Access Modifiers.
In c# we have maultiple access modifiers:-
-public
-private
-protected
-internal

******************************************* Containment:-
Creating objects of other types inside a class of different type as a property.
FacebookSignOn GoogleSignOn InstagramSignOn TwitterSignOn LinkedSignOn
			SingleSignOn

Composition:-
When Parent is strongly dependent on childs.
eg:
House is composed of Rooms-> House {Rooms}
Human is composed of Brain Heart Stomach Lungs-> Human{Brain, Heart, Stomach, Lungs}

Aggregation:-
When parent loosely dependent or not dependent on childs.

eg:
House aggregated by Furnitre, Lights -> House{Furniture, Lights}
Human is aggregated by Legs Arms Cloths -> Human{Legs, Arms, Cloths}

*******************************************
Polymorphism:-
Poly=Many
Morph=Name

1-Dynamic Ploymorphism.
	Overriding:-
		a-Function Overriding
		b-Property Overriding
	-Inheritance is a must

2-Static Ploymorphism.
	Overloading:-
		a-Function Overloading.
		b-Operator Overloading. "aamir" + "akhtar"="aamirakhtar"; 1+2=3

Same Name but Many(Different) behaviours.

Eg: Dynamic Polymorphism:- (Spcialization)
Vitz1999
{
	Model
	Engine
	PowerStearing
	Dimensions
	Weight
	Price=500,000
	Shape
	
	AirConditioning(){Manual Climate Control}
	Braking(){Abs}
	Drive(){Manual}
}

Vitz1999Auto : Vitz1999
{
	override Price=600,000

	override AirConditioning(){Auto Climate Control}
	override Drive(){Auto}
}

Human
{
	FavouriteWork()
	{
	}
}

Naseem : Human
{
	FavouriteWork()
	{
		Qawwali
	}
}

Farasat : Naseem
{
	FavouriteWork()
	{
		Listening to music
	}
}

************ Dynamic Example

Doctor
{
	Treatment();
}

Surgeon :Doctor
{
	Treatment(){Surgery}
}

Physician :Doctor
{
	Treatment(){Prescribing the medicine}
}

Physiotherapist :Doctor
{
	Treatment(){PhysioTherapy}
}

Static Polymorphism:-
Function Overloading:-
Nokar
{
	HouseKeeping(Dusting)
	{}
	HouseKeeping(Dusting, cooking)
	{}
	HouseKeeping(Dusting, Cooking, Driving)
	{}
}

1-Number of parameters.
2-Type of the parameters.
3-Order of the type of the parameters.

Calaculator
{
	1.
	Add(int a, int b)
	{
	a+b;
	}

	Add(int a, int b, int c)
	{
	a+b+c;
	}

	2.
	Add(float a, float b)
	Add(int a, int b, float c)
	
	3.
	Add(int a, float b, int c)

	+(string a, string b)
	{
		a concats b
	}

	+(int a, int b)
	{
		a added to b;
	}
}